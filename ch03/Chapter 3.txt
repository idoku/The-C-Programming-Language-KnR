CHAPTER 3:Control Flow
    The control-flow statments of a language specify the order in which computations are performed.We have already met the most common control-flow cnstructions in earlier examples;
    一个语言的控制语句用于指定计算执行的次序.我们在前面的例子中见到了一些常用的控制结构;
there we will complete the set,and be more precise about the ones discussed before.
现在我们将在本章完整的讨论控制语句,更清晰,更全面的对它们进行介绍.

3.1 Statements and Blocks
    An expression such as x = 0 or i++ or printf(...) becomes a statment when it is followed by a semicolon,as in
    像x=0或者i++或者printf(...)之类的表达式之后加一个分号时,使它们变成了一个语句,像
        x = 0;
        i++;
        printf(...);
In C,the semicolon is a statment terminator,rather than a separator as it is in languages like Pascal.
在C中,一个分号表示一个语句的终结符,而不是像Pascal语言把分号作为语句之间的分隔符.
    Braces { and } are used to group declarations an statments together into a compound statment,or block,so that they are syntactically equivalent to a single statement.
    可以用一组花括号{和}把一组申明和语句括在一起作为复合语句,或者语句块,所以复合语句语法上等同于单个语句.
The braces that surround the statements of a function are one obvious example;braces around multiple statements after an if,else,while,or for are another.
一个明显的例子就是函数申明时用括括住的语句;其它例子像if,else,while,或者for都是之后用括号括住多条语句.
(Variables can be declared inside any block;we will talk about this in Chapter 4.)There is no semicolon after the right brace that ends a block.
变量可以定义在任何语句块之中;我们将在第四章讨论.)在右括号的结尾没有分号.


3.2 If-Else
    The if-else statment is used to express decisions.Formally,the syntax is 
    if-else语句用来表明判定.正式的,语法形式像
        if (expression)
            statement1;
        else
            statement2;
where the else part is optional.The expression is evaluated;if it is true(that is,if expression has a non-zero value),statement1 is executed.
else部分是可选择的.在if语句执行时,首先计算表达式的值;如果是真值(就是说,if表达式拥有一个非0的值),语句1被执行
if it is false(expression is zero) and if there is an else part,statement2 is executed instead.
如果if是假值(表达式为0)并且if有else的部分,则statement2被执行.
    Since an if simply tests the numeric value of an expression,certain coding shortcuts are possible.The most obvious is writing
    由于if表达式只是简单测试表达式的数值,可以编写比较快捷的方式,最明显的写法是
        if(expression)
instead of 
代替
        if(expression!=0)
Sometimes this is natural and clare;at other times it can be cryptic.
有时这样比较自然和清楚,有时又显得比较隐秘.
    Because the else part of an if-else is optional,there is an ambiguity when an else is omitted from a nested if sequece.This is resolved by associating the else with the closest previous else-less if.
    因为else部分是if-else的一个可选择项,当在嵌套的if语句序列中缺省某个else部分时会引起歧义.这个问题可以解决通过使每一个else与最近的还无else匹配的if匹配.
    For example,in
    例如在下面语句中
        if(n>0)
            if(a>b)
                z=a;
            else
                z=b;
the else goes with the inner if,as we have shown by indentation.If that isn't what you want,braces must be used to force the proper association:
else部分与嵌套在内层的if匹配,正如缩进表示的那样.如果这不是我们所希望的,可以用花括号来使该else部分与所希望的if强制结合:
        if(n>0){
            if(a>b)
                z=a;
        }
        else
            z=b;
    The ambiguity is especially pernicious in situations like this:
    歧义在某些情况下特别有害,例如:
        if(n>=0){
            for(i=0;i<n;i++)
                if(s[i]>0){
                    printf("...");
                    return i;
                }
        else  /* WRONG */
            printf("error--n is negative\n");
The indentation shows unequivocally what you want,but the compiler doesn't get the message,and associates the else with the inner if.
其中缩进显式了希望的结果,但是编译没有给出消息,它会使else部分与嵌套在里面的if匹配.
This kind of bug can be hard to find;it's a good idea to use braces when there are nested ifs.
这类错误很难发现,因此好的做法是用花括号当有嵌套的if语句时.
    By the way,notice that there is a semicolon after z = a in
    顺便说,注意到语句后面有一个分号.
        if(a>b)
            z = a;
        else
            z = b;
This is because grammatically,a statement follows the if,and an expression statement like "z=a;" is alwasys terminated by semicolon.
这是因为,从语法上说,跟在if后面的语句总是以一个分号终结,如z=a之类的表ifference in run-time.



3.3 Else-If
    The construction
        if(expression)
            statment
        else if(expression)
            statement
        else if(expression)
            statement
        else if(expression)
            statement
        else
            statement
occurs so often that it is worth a brief separate discussion.This sequence of if statements is the most general way of writing a multi-way decision.
这种结构经常用到,值得单独对之进行简要讨论.这种嵌套的if语句是用来编写多条件判定的最一般的方法.
The expressions are evaluated in order;if any expression is true,the statment associated with it is executed,and this terminates the whole chain.
表达式依次求值;一旦某个表达式为真,那么就执行与之相关语句,并且终止整个语句链的执行.
As always,the code for each statement is either a single statement,or a group in braces.
一如既往,每个语句可以是一个单个语句,也可以是用花括号扩住的一组语句.
    The last else part handles the "none of the above" or default case where none of the other conditions is satisfied.Sometimes there is no explicit action for the default;in that case the trailing
    最后一个else部分用于处理"上述条件均不成立"的情况或缺省条件情况,此时,上面的各个条件均不满足,有时对缺省情况不需要采取明显的动作,在这种情况下,可以吧末尾的
        else
            statement
can be ommitted,or it may be used for error checking to catch an "impossible" condition.
可以省略,或者它可以用来检查错误检查,捕获"不可能"的条件.
    To illustrate a three-way decision,here is a binary search function that decides if a particular value x occurs in the sorted array v.The elements of v must be in increasing order.
    可以用一种二分查找函数来描述三路判定的用法.这个函数用于判定在排序好的数组v中是否有特定的x值.数组v中的元素必须是升序排列.
The function returns the position (a number between 0 and n-1) if x occurs in v,and -1 if not.
如果x在v中,那么该函数返回x所在v中的位置(数字0到n-1),如果不在则返回-1.
    Binary search first compares the input value x to the middle element of the array v.If x is less than the middle value,searching focuses on the lower half of the table,otherwise on the upper half.
    二分查找首先比较输入值x与数组v中间元素, 如果x小于中间值,那么在该数组的前半部分查找,否则,在该数组的后半部分查找.
In either case,the next step is to compare x to the middle element of the selected half.This process of dividing the range in two continues until the value is found or the range is empty
这两种情况,下一步是将x与所选的部分的中间元素比较.这个二分过程一直进行下去,直到找到指定的值,或者查找的范围为空.
/* binsearch: find x in v[0] <= v[1] <= ... <= v[n-1] */
int binsearch(int x,int v[], int n)
{
	int low,high,mid;
	low = 0;
	high = n -1;
	while(low<=high){
		mid = (low + high)/2;
		if( x< v[mid])
			high = mid - 1;
		else if(x > v[mid])
			low = mid +1;
		else /* found match */
			return mid;
	}
	return -1; /* no match */
}
The fundamental decision is whether x is less than,greater than,or equal to the middle element v[mid] at each step;this is a natural for else-if.
这个函数的基本判定是,在每一步中x是小于,大于或等于数组v的中间元素;这自然用到else-if结构.

Exercise 3-1. Our binary search makes two testsinside the loop,when one would suffice(at the price of more tests outside).Write a version with only one test inside the loop and measure the difference in run-time.


3.4 Switch
    The switch statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values,and branches accordingly.
    switch语句是一种多路判定语句,它根据表达式匹配若干常量整数值中的某一个匹配来相应地执行有关的分支动作.
        switch(expression){
            case const-expr: statements
            case const-expr: statements
            default: statements
        }
Each case is labeled by one or more integer-valued constants or constant expressions.If a case matches the expression value,execution starts at that case.All case expressions must be different.
每一个分支都由一个或多个整数常量或常量表达式标记.如果某一个分支匹配表达式的值,那么就从这个分支开始执行.所有的分支表达式必须不同.
The case labeled default is executed if none of the other case are satisfied.A default is optional;if it isn't there and if none of the cases match,no action at all takes place.
如果没有任何的其他分支满足条件分支标识default被执行.default是可选的;如果没有default分支并且没有任何分支与表达式匹配,那么switch语句就不会有动作发生.
Cases and the default clause can occur in any order.
各分支和default分支的次序是任意的.
    In Chapter 1 we wrote a program to count the occurrences of each digit,white space,and all other characters,using a sequence of if ... else if... else.Here is the same program with a switch:
    在第一章中我们写了一个程序用来统计每一个数字,空格和其他字符的次数,使用了if..else if...else结构.下面是同样的程序使用switch:
            #include <stdio.h>

int main() /* count digits,white space,others */
{
	int c,i,nwhite,nother,ndigit[10];
	nwhite = nother = 0;
	for(i=0;i<10;i++){
		ndigit[i] = 0;
	}
	while((c=getchar())!=EOF){
		switch(c){
			case '0':case '1': case '2':
			case '3':case '4': case '5':
			case '6':case '7': case '8':
			case '9':
				ndigit[c-'0']++;
				break;
			case ' ':
			case '\n':
			case '\t':
				nwhite++;
				break;
			default:
				nother++;
				break;
		}
	}
	printf("digits = ");
	for(i=0;i<10;i++)
		printf("%d",ndigit[i]);
	printf(",white space = %d,other = %d\n",nwhite,nother);
	return 0;
}
    The break statement causes an immediate exit from the switch.Because cases serve just as labels,after the code for one case is done,
    break语句用于从switch结构中立即退出.由于在switch语句中case的作用就像标签一样,在某个case语句执行完后,
execution falls through to the next unless you take explicit action to escape.break and return are the most common ways to leave a switch.
就进入到下一个case执行,除非你显示的控制退出.break和return通常用来退出switch结构
A break statement can also be used to force an immediate exit from while,for,and do loops,as will be discussed later in this chapter.
.break语句还可以用来强制从while,for和do循环中立即退出,我们将在本章的稍后讨论.
    Falling through cases is a mixed blessing.On the positive side,it allows several cases to be attached to a single action,as with the digits in this example.
    对于依次执行case这种做法毁誉参半.好的一方面是,它允许几个cases组合在一起完成单个任务,如上面对数字的处理.
But it also implies that normally each case must end with a break to prevent falling through to the next.Falling through from on case to another is not robust,
但是,为了防止进入下一个逻辑分支每一个case必须以一个break结束.从一个case到另一个case是不健全的,
being prone to disintegration when the program is modified.With the exception of multiple labels for a single computation,fall-throughs should be used sparingly,and commented.
当程序修改的时候容易发生错误.除了将多个标签比表示同一计算外,应谨慎使用从一个分支直接进入下一个分支,在不得不使用时,加上注释.
    As a matter of good form,put a break after the last case(the default here) even though it's logically unecessary.Some day when another case gets added at the end,
    作为一种好的习惯,在最后一个条件(即default这里)放置一个break语句.虽然这样在逻辑上是无用的.但是有天当其他case添加到结尾时,
this bit of defensive programming will save you.
这种防范型编程会拯救你的代码.

Exercise 3-2. Write a function escape(s,t) that converts characters like newline and tab into visible escape sequences like \n and \t as it copies this string t to s.Use a switch.Write a function for the other direction as well,converting escape sequences into the real characters.



3.5 Loops - While and For
    We have already encountered the while and for loops.In
    我们在前面已经遇到过while与for循环语句,在
        while(expression)
            statement
the expression is evaluated.If it is non-zero,statement is executed and expression is re-evaluated.This cycle continues until expression becomes zero,at which point execution resumes after statement.
表达式的值被计算.如果它的值是非0,statement语句被执行,并且再次求表达式的值.循环一直执行直到表达式的值为0,此时从语句的下一个语句接着执行.
    The for statement
        for(expr1;expr2;expr3)
            statement
is equivalent to 
等价于
    expr1;
    while(expr2){
        statement;
        expr3;
    }
except for the behavior of continue,which is described in Section 3.7.
包含了continue语句除外,该语句将在3.7节中介绍.
    Grammatically,the three compontents of a for loop are expressions.Most commonly,expr1 and expr3 are assignments or function calls and expr2 is a relational expression.
    从语法上看,for循环的三个组成部分都是表达式.通常,expr1和expr3都是赋值或者函数调用,而expr2则是关系表达式.
Any of the three parts can be omitted,although the semicolons must remain.If expr1 or expr3 is omitted,it is simply dropped from expansion.If the test,expr2,is not present,it is taken as permanently ture,so 
三个表达式中任何一个都可以省略,但是分号必须保留.如果expr1或者expr3被省略了,那么它就退化成while循环语句.如果用于测试,expr2不存在,那么表达式永远为真,
        for(; ;){
            ...
        }
is an "infinite" loop,presumably to be broken by other means,such as a break or return.
这是一个"无限"循环,这种语句要用其他手段才能终止,如break或者return.
    Whether to use while or for is largely a matter of personal preference For example,in
    选择使用while或者for主要取决于个人的喜好,例如,
        while((c=getchar())==' '|| c=='\n' || c=='\t')
            ; /* skip white space characters */
there is no initialzation or re-initialization,so the while is most natural.
不包括初始化或重新初始化部分,所以选择while循环语句最为自然.
    The for is preferable when there is a simple initialization and increment,since it keeps the loop control statements close together and visible at the top of the loop.This is most obvious in
    for语句更合适当有一些简单的初始化和增量时,因为它可以使循环控制的语句更密切,并使控制循环的信息在循环语句内部.在如下语句中表现更为明显:
        for(i=0;i<n;i++)
            ...
which is the C idiom for processing the first n elements of an array,the analog of the Fortran Do loop or the Pascal for.The analogy is not perfect,however,
这是C语言中处理一个数组的前n个元素的习惯用法,类似于Fortran语言的Do循环与Pascal语言的for循环.但是,这种比较不够恰当,因为
since the index and limit of a C for loop can be altered from within the loop,and the index variable i retains its value when the loop terminates for any reason.
C语言的循环语句的位标值和终值在循环语句中可以改变,当循环因为某种原因终止时索引变量i将仍然保留.
Because the components of the for are arbitrary expressions,for loops are not restricted to arithmetic progressions.Nonetheless,
由于for语句的各个组成部分可以是任何表达式,故for语句并不限于算术值循环控制,然而,
it is bad style to force unrelated computations into the initialization and increment of a for,which are better reserved for loop control operations.
强制性地把一些无关的计算放到for语句的初始化和自增长部分是一种坏的风格,它们最好用作循环控制的操作.
    As a larger example,here is another version of atoi for converting  a string to its numeric equivalent.This one is slightly more general than the one in Chapter 2;
    作为一个更大的例子,再次考虑用于将字符串转换为对应的数字值的atoi函数.下面这个版本比在第二章中介绍的那个版本更为通用一些;
it compes with optional leading white space and an optional + or - sign.(Chapter 4 show atof,which does the same conversion for floating point numbers.)
它处理任何前导空白字符和加减号.(第四章将介绍函数atof,它用于对浮点数作同样的转换.)
    The structure of the program reflects the from of the input:
    程序结构反应了输入形式:
        skip white space,if any
        get sign,if any
        get integer part and convert it
Each step does its part,and leaves things in a clean state for the next.The whole process terminates on the first character that could not be part of a number.
每一步都处理其输入,并且给下一步留下清楚的状态.整个处理过程中断在不是数的部分的第一个字符为止.
#include <stdio.h>

/* atoi:convert s to integer;version 2 */
int atoi(char s[])
{
	int i,n,sign;
	for(i=0;isspace(s[i]);i++) /* skip white space */
		;
	sign = (s[i]=='-')?-1:1;
	if(s[i]=='+' || s[i]=='-') /* skip sign */
		i++;
	for(n=0;isdigit(s[i]);i++)
		n=10*n+(s[i]-'0');
	return sign * n;
}
The standard library provides a more elaborate function strtol for conversion of strings to long integers;see Section 5 of Appendix B.
标准库提供了一个更精巧的函数strtol用来转换string为长整型;见附录B.5节.
    The advantages of keeping loop control centralized are even more obvious when there are several nested loops.The following function is a Shell sort for sorting an array of integers.
    当使用嵌套循环语句时,循环控制集中到一点的优点更加明显.下面的函数用于实现对整数数组进行排序的Shell排序法.
The basic idea of this sorting algorithm,which was invented in 1959 by D.L.Shell,is that in early stages,far-apart elements are compared,rather than adjacent ones as in simpler interchange sorts.
这个排序算法的观点由D.L.Shell在1959年发明,其基本思想是,先对隔得比较远的元素进行比较,而不是像简单交换排序算法中那样比较向相邻的元素.
This tends to eliminate large amounts of disorder quickly,so later stages have less work to do.The interval between compared elements is gradually decreased to one,
这样可以快速地减少大量无序的情况,以后就可以少做些工作.各个被比较的元素之间的距离在逐步减少,一直减少到1,
at which point the sort effectively becomes an adjacent interchange method.
此时排序变成了相邻元素的互换.
/* shellsort:sort v[0]...v[n-1] into increasing order */
void shellsort(int v[],int n)
{
	int gap,i,j,temp;
	for(gap=n/2;gap>0;gap/=2)
		for(i = gap;i<n;i++)
			for(j=i-gap;j>=0&&v[j]>v[j+gap];j-=gap){
					temp = v[j];
					v[j] = v[j+gap];
					v[j+gap] = temp;
			}
}
There are three nested loops.The outermost controls the gap between compared elements,shrinking it from n/2 by a factor of two each pass until it becoms zero.The middle loop steps along the elements.
这个函数中包含3个嵌套循环语句,最外层for语句用于控制两个比较元素之间的距离,从n/2开始对折,一直到0.中间的循环控制每一个元素.
The innermost loop compares each pair of elements that is separated by gap and reverses any that are out of order.Since gap is eventually reduced to one,all elements are eventually ordered correctly.
最内层的循环比较各对相距gap个位置的元素,并在这两个元素大小位置颠倒时把它们互换过来.由于gap最终需要减到1,所有的元素最终排序正确.
Notice how the generality of the for makes the outer loop fit the same from as the others,even though it is not an arithmetic progression.
注意即使是其不是算术值情况下,for语句的通用性也使得外层循环能够适用.
    One final C operator is the comma ",",which most often finds use in the for statement.A pair of expressions separated by a comma is evaluated left to right,
    C语言还有操作符,叫做逗号操作符",",经常在用来for循环语句中.由逗号分隔的各个表达式从左至右进行求值.
and the type and value of the result are the type and value of the right operand.Thus in a for statement,it is possible to place multiple expressions in the various parts,
结果的类型和值是右运算分量的类型和值,在for循环语句中,可以把多个表达式放在不同的部分,
for example to process two indices in parallel.This is illustrated in the function reverse(s),which reverses the string s in place.
例如,可以同时处理2个位标.这可以通过函数reverse(s)来说明,该函数用来将字符串中各个字符的位置颠倒一下.
#include <stdio.h>

/* reverse: reverse string s in place */
void reverse(char s[])
{
	int c,i,j;
	for(i=0,j=strlen(s)-1;i<j;i++,j--)
	{
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
The commas that separate function arguments,variables in declarations,etc.,are not comma operators,and do not guarantee left to right evaluation.
用于分割函数参数,说明中的变量定义等的逗号不是逗号操作符,并且运算符也不保证要从左至右求值.
    Comma operators should be used sparingly.The most suitable uses are for constructs strongly related to each other,as in the for loop in reverse,
    逗号操作符使用需谨慎.逗号运算符最适合用于描述彼此密切的相关的构造,如上面的reverse函数,
and in macros where a multistep computation has to be a single expression.A comma expression might also be appropriate for the exchange of elements in reverse,
以及需要在单个表单式中表示多步计算的宏.逗号表达式可以用在reverse函数的元素交换过程,
where the exchange can be thought of as a single operation:
该交换过程被当做单步操作.
       for(i=0,j=strlen(s)-1;i<j;i++,j--)
            c = s[i],s[i] = s[j],s[j] = c;

Exercise 3-3. Write a function expand(s1,s2) that expands shorthand notations like a-z in the string s1 into the equivalent complete list abc...xyz in s2.Allow for letters of either case and digits,and be prepared to handle cases like a-b-c and a-z0-9 and -a-z.Arrange that a leading or trailing - is taken literally.


3.6 Loops --- Do-while
    As we discussed in Chapter 1,the while and for loops test the termination condition at the top.By contrast,the third loop in C,the do-while,
    我们在第一章讨论过,while循环和for循环在循环体执行前对终止条件进行测试.作为对应,在C中的第三种循环是do-while,
tests at the bottom after making each pass throught the loop body;the body is always executed at least once.
在循环体执行完毕后对终止条件进行测试;循环体至少执行一次.
    do
        statement
    while(expression);
The statement is executed,then expression is evaluated.If it is true,statement is evaluated again,and so on.When the expression becomes false,the loop terminates.
语句先被执行,然后表达式求值.如果是true,语句再次执行,如此下去.当表达式变为false,循环终止.
Except for the sense of the test,do-while is equivalent to the Pascal repeat-until statement.
除了条件语义外,do-while循环与Pascal语言的repeat-until语句等价.
    Experience shows that do-while is much less used than while and for.Noetheless,from time to time it is valuable,as in the following function itoa,
    经验表明do-whil循环语句比while和for使用得更少.但是,有时候它还是有价值的,如下面的函数itoa,
which converts a number to a character string(the inverse of atoi).The job is slightly more complicated than might be thought at first,
其用于把数字转化为字符(是atoi的逆函数).这一工作比想象中要复杂,
because the easy methods of generating the digits gernate them in the wrong order.We have chosen to generate the string backwards,then reverse it.
因为如果以产生数字的方法来产生字符串,产生的字符串的次序正好颠倒了.故先生成颠倒的字符串,然后再把它颠倒过来.
/* itoa:convert n to characters in s */
void itoa(int n,char s[])
{
	int i,sign;
	if((sign = n)<0) /* record sign */
		n = -n;		/* make n positive */
	i=0;
	do{			/* generate digits in reverse order */
		s[i++] = n % 10 + '0';  /* get next digit */
	}while((n/=10)>0); /* delete it */
	if(sign < 0)
		s[i++] = '-';
	s[i]='\0';
	reverse(s);
}
The do-while is ncessary,or at least convenient,since at least one character must be installed in the array s,even if n is zero.
这里的do-while是必要的,或者至少是方便的,因为即使n是0也要至少把一个字符放置到数组s中.
We also used braces around the single statement that makes up the body of the do-while,even though they are unnecessary,
我们也用花括号来扩住作为do-while语句体的单个语句,即使没有必要这样做,
so the hasty reader will not mistake the while part for the beginning of a while loop.
但这样可以使那些比较轻率读者使用while语句时少犯错误.

Exercise 3-4.In a two's complement number repressentation,our version of itoa does not handle the largest negative number,that is,the value of n equalto -(2^(wordsize-1)).Explain why not.Modify is to print that value correctly,regardless of the machine on which it runs.

Exercise 3-5.Write the function itob(n,s,b) that converts the integer n into a base b character representation in the string s.In particular itob(n,s,16) formats n as a hexadecimal integer in s.

Exercise 3-6.Write a version of itoa that accepts three arguments instead of two.The third argument is a minimum field width;the converted number must be padded with blanks on the left if neccessary to make it wide enough.


3.7 Break and Continue
    It is sometimes convenient to be able to exit from a loop other than by testing at the top or bottom.The break statement provides an early exit from for,while, and do,just as from switch.
    在循环语句执行过程中,除了通过测试从循环语句的顶部或底部正常退出外,有时从循环中直接退出更为方便.break语句提供从for,while和do,甚至从switch中提前退出.
A break causes the innermost enclosing loop or switch to be exited immediately.
break语句可以用于立即从内层循环语句或switch中退出.
    The following function,trim,removes trailing blanks,tabs,and newlines from the end of a string,using a break to exit from a loop when the rightmost non-blank,non-tab,non-newline is found.
    下面的函数trim,用于删除尾部的blanks,tabs和newline符号.它用一个break在找到最右边的non-blank,non-tab,non-newline时退出循环.
/* trim: remove traliling blanks,tabs,newlines */
int trim(char s[])
{
	int n = strlen(s)-1;
	 printf("%d|",n);
	 for(;n>=0;n--)
	 {		 
		 if(s[n]!=' ' && s[n]!= '\t' && s[n]!='\n')
			 break;			
	 }
	s[n+1] = '\0';
	return n;
}
    strlen returns the length of the string.The for loop starts at the end and scans backwards looking for the first character that is not a blank or tab or newline.The loop is brkoen when one is found.
    strlen函数返回字符串长度.for循环用于从字符串的末尾反过来寻找第一个既不是空格,制表符,也不是换行符的字符.循环在当有一个这样的字符找到时退出.
or when n becomes negative(that is,when the entire string has been scanned).You should verify that this is correct behavior even when the string is empty or contains only white space characters.
或者当n变成负数时(这说明整个字符串都被扫描完)终止执行.你必须验证正确的行为,即使是整个字符串是为空的,或者字符串仅仅包含space字符时,该函数也是正确的.
    The continue statement is related to break,but less often used;it causes the next iteration of the enclosing for,while,or do loop to begin.
    continue语句与break语句相关,但是很少使用;continue语句使其所在的for,while,或do-while语句开始下一个循环.
In the while and do,this means that the test part is executed immediately;in the for,control passes to the increment step.The continue statement applies only to loops,not to switch.
在while和do语句中,这意味着立即执行测试部分;在for语句中,控制的执行意味着使控制传递到增量部分.continue语句能用于循环语句,不能用于switch语句.
A continue inside a switch inside a loop causes the next loop iteration.
如果某个continue语句位于switch语句中,而后者又位于循环语句中,那么该continue语句用于控制下一次循环.
    As an example,this fragment processes only the non-negative elements in the array a;negative values are skipped.
    作为例子,这个程序片段仅仅处理数组a中非负数元素.负数将跳过.
        for(i = 0;i<n;i++){
            if(a[i] < 0) /* skip negative elements */
                continue;
            /* do positive elemtns */
        }
The continue statement is often used when the part of the loop that follows is complicated,so that reversing a test and indenting another level would nest the program too deeply.
当循环语句某些部比较复杂时常常使用continue语句,如果不使用continue语句,那么 就可能要把测试反过来,或嵌入另一层循环,而这又会使程序嵌套更深.


3.8 Goto and Labels
    C provides the infinitely-abusable goto statement,and labels to branch to.Formally,the goto is never necessary,and in practice it is almost always easy to write code without it.
    C提供了可以毫无节制的使用goto语句,以及标记got语句所要转向的分支的labels标签.通常,goto是不必要的,实践上看不使用它也能够轻易的写出代码.
We have not used goto in this book.
我们在本书中没有使用goto语句.
    Nevertheless,there are a few situations where gotos may find a place.The most common is to abandon processing in some deeply nested structure,such as breaking out of two or more loops at once.
    然而,在有些情况下使用goto可能比较合适.最常见的做法是在有些深度嵌套的循环中放弃处理,像一次终止两个或多个循环.
The break statement cannot be used directly since it only exits from the innermost loop.Thus:
break语句不能直接用于这一目的,它只能从最内层循环中退出.例如:
        for(...)
            for(...){
                ...
                if(disaster)
                    goto error;
            }
        ...
    error:
        clean up the mess
This organization is handy if the error-handling code is non-trivial,and if errors can occur in several places.
如果错误处理代码比较重要,并且几个地方都会出现错误,那么使用这种组织就比较灵活方便.
    A label has the same form as a variable name,and is followed by a colon.It can be attached to any statement in the same function as the goto.The scope of a label is the entire function.
    标签的形式与变量名字相同,其后跟一个冒号.标签可以用在任何语句的前面,但要与相同的goto语句在同一个函数中.标签的作用域是整个函数.
    As another example,consider the problem of determining whether two arrays a and b have an element in common.One possibility is 
    另一个例子,考虑判定在两个数组a与b中是否具有相同元素的问题.一种可能的解决方法是:
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                if(a[i]==b[j])
                    goto found;
        /* did't find any common element */
        ...
    found:
        /* got one: a[i] == b[j]  */
    Code involving a goto can always be written without one,though perhaps at the price of some repeated tests or an extra variable.For example,the array search becomes
    所有带有got语句的程序都可以改写成不带goto语句的程序,但这可能需要增加一些重复的测试或额外的变量为代价.例如,可以将上面的数组查找写成如下
        found = 0;
        for(i=0;i<n && !found;i++)
            for(j=0;j<m && !found;j++)
                if(a[i] == b[j])
                    found = 1;
        if(found)
            /* got one:a[i-1]==b[j-1] */
            ...
        else
            /* didn't find any common element */
            ...
    Code involving a goto can always be written without one,thouhg perhaps at the price of some repeated tests or an extra variable.For example,the array search becomes
    代码带有goto语句总是可以写得不带goto,尽管可能增加一些代价如重复测试或者额外变量.例如,数组搜索可以这样
        found = 0;
        for(i=0;i<n && !found;i++)
            for(j=0;j<m && !found;j++)
                if(a[i] == b[j])
                    found = 1;
        if(found)
            /* got one:a[i-1] == b[j-1]  */
            ...
        else
            /* didn't find any common element */
            ...
    With a few exceptions like those cited here,code that relies on goto statements is generally harder to understand and to maintain than code without gotos.
    除了以上介绍的几个程序外,代码依赖goto语句比那些不使用goto语句的代码难理解和维护.
Although we are not dogmatic about the matter,it does seem that goto statements should be used rerely,if at all.
虽然不特别强调这,但是我们还是建议尽可能减少goto语句的使用.


