Introduction
    C is a general-purpose programming language,It has been closely associated with the UNIX system where it was developed,since both the system and most of the programs that run on it are written in C.
    C 是一种多用途的编程语言,它与UNIX系统紧密的关联,它是为UNIX而开发的,因为包括UNIX系统和大部分在其上运行的程序都是用c语言编写.
The language,however,is not tied to any one eperating system or machine;and although it has been called a "system programming language" because it is useful for writing compilers and operating systems,
然后,C语言并没有绑定到任何特定的操作系统或机器.它被称之为"系统编程语言"的 原因,是因为它很适合用来编写编译器和操作系统,
it has been used equally well to write major programs in many different domains.
它同样被很好的用来在很多不同领域编写主要程序.
    Many of the important ideas of C stem from the language BCPL,developed by Martin Richards.The influence of BCPL on C proceeded indirectly through the language B,
    C中许多重要的想法来自BCPL语言,其由Martin Richards开发.BCPL对C的影响间接来自于B语言.
which was written by Ken Thompson in 1970 for the first UNIX system on the DEC PDP-7.
B语言由Ken Thompson在1970为了第一版UNIX系统在DEC PDP-7而编写.
    BCPL and B are "typeless" languages.By contrast,C provides a variety of data types.The fundamental types are characters,and integers and floating point numerbs of several size.
    BCPL和B都是无类型语言.相比而言,C提供了多种数据类型.其基本类型是几种大小的字符,整数,浮点数类型.
In addition,there is a hierarchy of derived data types created with pointers,arrays,structures,and unions.any expression,including an assignment or a function call,can be a statement.
另外,还有从指针,数组,结构和联合产生的派生数据类型的层次.表达式由运算符合操作数组成.任何表达式,包括赋值或者函数调用,都可以是一个语句.
Pointers provide for machine-independent address arithmetic.
指针提供了独立于机器地址算法.
    C provides the fundamental control-flow constructions required for well structured programs:statement grouping,decision making (if-else),selecting one of a set of possible cases(switch),
    C为实现结构良好的程序提供了基础控制流结构:语句组,判断(if-else),选择一个可能的路径(switch),
looping with the termination test at the top(while,for),or at the bottom(do),and early loop exit(break).
终止测试在顶端进行(while,for)或底端进行(do)的循环,和提前跳出循环(break).
    Functions may return values of basic types,structures,unions,or pointers.Any function may be called recursively.Local variables are typically "automatic",or created anew with each invocation.
    函数可以返回基本类型的值,结构,联合或指针.任何函数可以被递归调用.局部变量通常是"自动的",即每次函数调用时重新创建变量.
Function definitions may not be nested but variables may be declared in a block-structured fashion.The functions of a C program may exist in separate source files that are compiled separately.
函数定义可能不是嵌套的,但是变量可以用块结构来声明.C语言的函数可能以单独的源文件形式存在,这些文件可以分开编译.
Variables may be internal to a function,external but knwon only within a single source file,or visible to the entire program.
变量对于函数可能是内部的,也可以是外部的,但外部变量只在一个源文件内有效,或者对整个程序是可见的.
    A preprocessing step performs macro substitution on program text,inclusion of other source files,and conditional compilation.
    编译的预处理阶段对程序文本执行宏替换,包括其他源文件,并且进行条件编译.
    C is a relatively "low level" language.This characterization is not pejorative:it simply means that C deals with the same sort of objects that most computers do,namely characters,numbers,and addresses.
    C是一种相对"低级"的语言,这种描述并没有贬义:它仅仅意味着C可以处理大部分计算机可以处理的对象,如字符,数字和地址.
These may be combined and moved about with the arithmetic and logical operators implemented by real machines.
这些对象可以用由机器执行的算术和逻辑运算符组合在一起.
    C provides no operations to deal directly with composite objects such as character strings,sets,lists,or arrays.There are no operations that manipulate an entire array or string,
    C不提供直接处理如字符串,集合,列表,数组等符合对象的操作.C没有处理整个数组或者字符的操作,
although structures may be copied as a unit.The language does not define any storage allocation facility other than static definition and the stack discipline provided by the local variables of functions;
虽然可以将整个结构作为一个单元拷贝.C语言没有定义任何存储分配工具,除了由函数的局部变量提供的静态定义和堆栈;
there is no heap or garbage collection.Finally,C itself provides no input/output facilities;there are no READ or WRITE statements,and no built-in file access methods.
也没有堆和内存回收.最后,C本身不提供输入/输出工具,同样没有READ或WRITE语句,也没有内部文件访问方法.
All of these higher-level mechanisms must be provided by explicityly called functions.Most C implementations have included a reasonably standard collection of such functions.
所有这些高级机制必须由显式调用的函数提供.C的大部分实现包含了这些函数的标准集合.
    Similarly,C offers only straightforward,single-thread control flow:tests,loops,grouping,and subprograms,but not multiprogramming,parallel operations,synchronization,or coroutines.
    类似的,C仅仅提供了直接的单线程控制流:测试,循环,组合和子程序,但是不提供多道程序设计,并行设计,同步和协同例程.
    Although the absence of some of these features may seem like a grave deficiency ("you mean I have to call a fucntion to compare two character strings?"),
    虽然缺少这些特性看上去会降低效率 ("你的意思是需要调用一个函数来比较两个字符串?"),
keeping the language down to modest size has real benefits.Since C relatively small,it can be described in a small space,and learned quickly.
但是把语言保持在一个适度的大小会很有益处,由于C相对较小,所有可以用小的篇幅描述它,也可以学得很快.
A programmer can reasonably expect to know and understand and indeed regularly use the entire language.
一个程序员可以有理由期望学会和理解并实际使用整个语言.
    For many years,the definition of C was the reference manual in the first edition of The C Programming Language.
    很多年以来,C定义就是<<C程序语言设计>>这本书的第一版参考手册.
In 1983,the American National Standards Institute(ANSI) established a committee to provide a modern,comprehensive definition of C.
在1983年,美国国家标准协会(ANSI)建立了一个委员会以提供一个C的现代,广泛的定义.
The resulting definition,the ANSI standard,or "ANSI C",was completed late in 1988.Most of the features of the standard are already supported by modern compilers.
定义结果就是C的的ANSI表准,即"ANSI C",在1988年完成.这个标准的大部分特性已由现代编译器所支持.
    The standard is based on the original reference manual.The language is relatively little changed;one of the goals of the standard was to make sure that most existing programs would remain valid,
    这个标准基于以前的参考手册.语言有相对较小的改变;其中一个目标是确保大部分已经存在的程序仍然有效,
or,failing that,that compilers could produce warnings of new behavior.
或者,当程序失败时,编译器可以产生新动作的警告信息.
    For most programmers,the most important change is a new syntax for declaring and defining functions.A function declaration can now include a description of arguments of the function;
    对大多数程序员而言,最重要的改变是新的函数声明和定义的语法.现在一个函数声明可以包含描述参数的信息;
the definition syntax changes to match.This extra information makes it much easier for compilers to detect errors caused by mismatched arguments;in our experience,it is a very useful addition to the language.
为了匹配,函数定义语法也相应的改变.这个额外的信息使它更容易编译时查出由匹配不当的参数导致的错误.根据我们的经验,这个扩充添加到语言中非常有用.
    There are other small-scale language changes.Structure assignment and enumerations,which had been widely available,are now officially part of the language.
    语言其他改变都比较小.一直广泛使用的结构赋值和枚举,现在已经是语言的正式部分了.
Floating-point computations may now be done in single precision.The properties of arithmetic,especially for unsigned types,are clarified.The preprocessor is more elaborate.
浮点指针运算可以进行单精度的了.算法的属性,特别是无符号类型的运算属性,都已经澄清了.预处理得到了更加详尽说明.
Most of these changes will have only minor effects on most programmers.
这些改变对大部分程序员来说影响都比较小.
    A second significant contribution of the standard is the definition of a library to accompany C.It specifies functions for accessing the operating system (for instance,to read and write files),
    这个标准的第二个重大贡献是定义了一个C的标准库.它说明了诸如访问操作系统(比如,读取和写入文件),
formattted input and output,memory allocation,string manipulation,and the like.A collection of standard headers provides uniform access to declarations of functions and data types.
格式化输入和输出,内存分配,字符串操作等函数.一个标准头文件的集合提供统一的访问函数和数据类型的声明的方法.
Programs that use this library to interact with a host sytem are assured of compatible behavior.Most of the library is closely modeled on the "standard I/O library" of the UNIX system.
那些使用标准库与宿主系统纯交互的程序保证有兼容的行为.标准库的大部分与UNIX系统的"标准I/O库"相似.
This library was described in the first editiion,and has been widely used on other systems as well.Again,most programmers will not see much change.
这个标准库在第一版中已经描述过,并很好地应用在很多其他系统中.同样,大部分程序员看不到有太多的变化.
    Because the data types and control structures provided by C are supported directly by most computers,the run-time library requied to implement self-contained programs is tiny.
    因为大部分计算机都直接支持由C提供的数据类型和控制结构,所以运行时需库要一个很小的库实现自包含的程序.
The standard library functions are only called explicitly,so they can be avoided if they are not needed.Most can be written in C,and except for the operating system details they conceal,are themselves portable.
标准库函数总是要显式的调用,所以如果没有必要,可以避免这些函数调用.除了涉及到操作系统的细节,大部分库函数可以用C来写,并且可以移植.
    Although C matches the capabilities of many computers,it is independent of any particular machine architecture.With a little care it is easy to write portable programs,that is,
    虽然C与大部分计算机的能力匹配,但它独立于任何特别的机器架构.只要稍微细心它就能很容易的写出可以移植的程序,
programs that can be run without change on a variety of hardware.The standard makes protability issues explicit,and prescribes a set of constants that characterize the machine on which the program is run.
即可以程序可以不作改变就运行于多种硬件上.这个标准明确地提出了可移植问题,并预设了一个常量的集合来说明运行程序的机器的特性.
    C is not a strongly-typed language,but as it has evolved,its type-checking has been strengthened.The original definition of C forwned on,but permitted,the interchange of pointers and integers;
    C不是一种强类型语言,但是随着它的发展,它的类型检查机制得到了加强.初始的C定义不赞同将指针和整数混用,但是允许这样做;
this has long since been eliminated,and the standard now requires the proper declarations and explicit conversions that had already been enforced by good compilers.
现在已经不允许了,现在标准需要将正确的声明和显式的强制转换,实际上一些好的编译器已经这样做了.
The new function declarations are another step in this direction.Compilers will warn of most type errors,and there is no automatic conversion of incompatible data types.
在这个方向上,新的函数声明方式是另一个步骤.编译器将给出大部分类型错误的警告,并不进行不相容的数据类型之间的自动转换.
Nevertheless,C retains the basic philosophy that programmers know what they are doing;it only requires that they state their intentions explicitly.
然而,C保留了基本哲学思想,即程序员知道他们要做什么;只是要求他们明确地表达他们的意图.
    C,like any other language,has its blemishes.Some of the operators have the wrong precedence;some parts of the syntax could be better.
    C像任何其他语言一样,有它自己的缺点.有一些运算符有不合适的优先级;语法的一部分还可以做得更好.
Nonetheless,C has proven to be an extremely effective and expressive language for a wide variety of programming applications.
然而,对于很多种程序设计的应用来说,C被证明非常高效和表达能力的语言.
    The book is organized as folows.Chapter 1 is a tutorial on the central part of C.The purpose is to get the reader started as quickly as possible,
    本书组织如下.第一章是对C中心部分的简要介绍.其目的是进可能的让读者开始,
since we believe strongly that the way to learn a new language is to write programs in it.The tutorial does assume a working knowledge of the basic elements of programming;
因为我们坚信学习新语言的方法是用它写程序.这个介绍假定读者对成程序设计的基本元素有一定的了解;
there is no explanation of computers,of complilation,nor of the meaning of an expression like n=n+1.Although we have tried where possible to show useful programming techniques,
子此没有解释计算机,编译,也没有解释诸如表达式n=n+1的意思.虽然我们已尽力在可能的地方展示有用的程序设计技术,
the book is not intended to be a reference work on data structures and algorithms;when forced to make a choice,we have concentrated on the language.
但本书的意图不是介绍数据结构和算法;当面临选择时,我们专注于语言本身.
    Chapters 2 through 6 discuss various aspects of C in more detail,and rather more formally,than does Chapter 1,although the emphasis is still on examples of complete programs,rather than isolated fragments,
    第二章到第六章讨论C的各种特性的细节,并且比第一章更形式化,着重点仍然是完成的程序实例,而不是孤立的程序段.
Chapter 2 deals with the basic data types,operators and expressions.Chapter 3 treats control flow:if-else,switch,while,for,etc.Chapter 4 covers functions and program structure---external variables,
第二章论述基本数据结构,运算符和表达式.第三章探讨控制流:if-else,switch,while,for等.第四章包括函数和程序结构---外部变量,
scope rules,multiple souce files,and so on-and also touches on the preprocessor.Chapter 5 discusses pointers and address arithmetic.Chapter 6 covers structures and unions.
作用域规则,多个源文件等.并且涉及到到预处理器.第五章讨论指针和地址运算.第六章讨论结构和联合.
    Chapter 7 describes the standard library,which provides a common interface to the operating system.This library is defined by the ANSI standard and is meant to be supported on all machines that support c,
    第七章描述标准库,它提供了一个与操作系统的通用接口.这个标准库有ANSI所定义,并且意味着受到所有支持C的机器支持,
so programs that use it for inpupt,output,and other operating system access can be moved from on system to another without change.
所以使用这个库进行输入,输出,文件和其他操作系统访问的程序可以不加改变地在不同机器上运行.
    Chapter 8 describes an interface between C programs and the UNIX operating system,concentrating on input/output,the file system,and storage allocaltion.
    第八章讨论C程序和UNIX操作系统之间的接口.集中于输入/输出,文件系统和存储分配.
Although some of this chapter is specific to UNIX systems,programmers who use other systems should still find useful material here,
尽管这一章的一部分是特定于UNIX系统,但是使用其他系统的程序员仍然可以从中找到有用的信息,
including some insight into how one version of the standard library is implemented,and suggestions on portability.
包括是深入了解如何实现标准库的一个版本和对可以移植性的一些建议.
    Appendix A contains a language reference manual.The official statement of the syntax and semantics of C is the ANSI standard itself.That document,however,is intended foremost for compiler writers.
    附录A包含一个语言参考手册.C的正式的语法和语义定义是ANSI标准本身.但那文档首先是写给编译器的编写者看的,
The reference manual here conveys the definition of the language more concisely and without the same legalistic style.Appendix B is summary of the standard library,again for users rather than implementers.
这个参考手册用一种不那么严格的方式更为简洁地介绍C语言的定义.附录B是一个标准库的总结,同样为用户而不是实现者准备的.
Appendix C is a short summary of changes from the original language.In cases of doubt,however,the standard and one's own compiler remain the final authorities on the language.
附录C是对初始语言变动的小节.如果有疑问,标准和每个人用自己的编译器将是解释语言的权威.